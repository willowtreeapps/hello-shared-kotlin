{"version":3,"file":"union.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/union.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,kDAAyD;AACzD,4CAA+E;AAI/E,IAAa,cAAc;IAAS,kCAAsB;IAA1D;;IA8DA,CAAC;IA1DG,qCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAsB;QACjD,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC;IACjD,CAAC;IAKD,qCAAY,GAAZ,UAAa,OAAgB,EAAE,IAAkB;QAC7C,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;IAeD,oCAAW,GAAX,UAAY,OAAgB,EAAE,IAAsB;QAApD,iBASC;QARG,IAAI,KAAK,GAAW,EAAE,CAAC;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,EAAlC,CAAkC,CAAC,CAAC;QACtE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,KAAK,GAAG,EAAE,CAAC;QACf,CAAC;QAED,MAAM,CAAC,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAeD,oCAAW,GAAX,UAAY,OAAgB,EAAE,IAAkB;QAAhD,iBASC;QARG,IAAI,KAAa,CAAC;QAClB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACrB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,EAAxC,CAAwC,CAAC,CAAC;QAC5E,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,KAAK,GAAG,EAAE,CAAC;QACf,CAAC;QAED,MAAM,CAAC,IAAI,iBAAS,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACL,qBAAC;AAAD,CAAC,AA9DD,CAAoC,mCAAsB,GA8DzD;AA9DY,cAAc;IAD1B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;GACnB,cAAc,CA8D1B;AA9DY,wCAAc","sourcesContent":["import * as ts from 'typescript';\n\nimport {Type, UnionType} from '../../models/types/index';\nimport {Component, ConverterTypeComponent, TypeConverter} from '../components';\nimport {Context} from '../context';\n\n@Component({name: 'type:union'})\nexport class UnionConverter extends ConverterTypeComponent implements TypeConverter<ts.UnionType, ts.UnionTypeNode> {\n    /**\n     * Test whether this converter can handle the given TypeScript node.\n     */\n    supportsNode(context: Context, node: ts.UnionTypeNode): boolean {\n        return node.kind === ts.SyntaxKind.UnionType;\n    }\n\n    /**\n     * Test whether this converter can handle the given TypeScript type.\n     */\n    supportsType(context: Context, type: ts.UnionType): boolean {\n        return !!(type.flags & ts.TypeFlags.Union);\n    }\n\n    /**\n     * Convert the given union type node to its type reflection.\n     *\n     * This is a node based converter, see [[convertUnionType]] for the type equivalent.\n     *\n     * ```\n     * let someValue: string|number;\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node  The union type node that should be converted.\n     * @returns The type reflection representing the given union type node.\n     */\n    convertNode(context: Context, node: ts.UnionTypeNode): UnionType {\n        let types: Type[] = [];\n        if (node.types) {\n            types = node.types.map((n) => this.owner.convertType(context, n));\n        } else {\n            types = [];\n        }\n\n        return new UnionType(types);\n    }\n\n    /**\n     * Convert the given union type to its type reflection.\n     *\n     * This is a type based converter, see [[convertUnionTypeNode]] for the node equivalent.\n     *\n     * ```\n     * let someValue: string|number;\n     * ```\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param type  The union type that should be converted.\n     * @returns The type reflection representing the given union type.\n     */\n    convertType(context: Context, type: ts.UnionType): UnionType {\n        let types: Type[];\n        if (type && type.types) {\n            types = type.types.map((t) => this.owner.convertType(context, null, t));\n        } else {\n            types = [];\n        }\n\n        return new UnionType(types);\n    }\n}\n"]}